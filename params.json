{
  "name": "C4-docs",
  "tagline": "Documentation for Connect Four game",
  "body": "The name of the game is Connect Four, and your objective is to place four tokens in a horizontal, vertical, or diagonal row before your opponent does.\r\n\r\n### Getting started\r\nTo compete, you will need to write a small program that receives game information as a string of JSON on STDIN and outputs integers to STDOUT.\r\n\r\nYour program will be bundled inside a Docker container that will then be run by a central game server. So before you can start, you will need:\r\n\r\n1. Docker (if you're on a Mac, here are some [instructions](https://docs.docker.com/v1.8/mac/step_one/))\r\n2. The ability to copy/paste one of the code samples below\r\n3. True grit\r\n\r\n### Writing your bot\r\nBelow are three sample bots in Ruby, Java, and JavaScript. Each bot contains a loop that:\r\n\r\n1. Reads game state from STDIN\r\n2. Writes column information to STDOUT\r\n\r\nThat's it. The JSON blob you receive on STDIN will be newline terminated, and your column number is expected to be newline terminated as well. **Failure to include a newline will cause your bot to forfeit**. \r\n\r\nGame state is returned as follows:\r\n\r\n```\r\n{\r\n  \"board\": [[0,0,0,0,0,0],\r\n            [0,0,0,0,0,0],\r\n            [0,0,0,0,0,0],\r\n            [0,0,0,0,0,2],\r\n            [2,0,0,0,0,2],\r\n            [1,1,0,1,0,2],\r\n            [1,2,2,1,2,1]],\r\n  \"id\": 1,\r\n  \"players\": [\r\n    {\"name\": \"docker.insops.net/playerOne/bot:latest\"},\r\n    {\"name\": \"docker.insops.net/playerTwo/bot:latest\"}\r\n  ],\r\n  \"winner\": null,\r\n  \"winReason\": null,\r\n  \"currentPlayer\": 1\r\n}\r\n```\r\n\r\nYour player will be represented in the board by the number in the \"currentPlayer\" key. When the game is over, the \"winner\" and \"winReason\" keys will be non-null. The bottom of the board is the last row, and the top of the board is the first row. Columns are zero-indexed.\r\n\r\n#### Example bots\r\n\r\n##### Ruby\r\n<script src=\"https://gist.github.com/zachpendleton/9a2d30507b1ae19c8b863fa005e18814.js\"></script>\r\n\r\n##### Java\r\n<script src=\"https://gist.github.com/zachpendleton/dbdd0e78ab112772111f75b3ba2133ee.js\"></script>\r\n\r\n##### JavaScript\r\n<script src=\"https://gist.github.com/zachpendleton/6919727ef748dab7120c6ca700fb210c.js\"></script>\r\n\r\n### Docker-izing your bot\r\nYour bot must be submitted as a Docker container that is hosted on either [DockerHub](//dockerhub.com) or [docker.insops.net](//docker.insops.net). If you aren't sure what any of this means, head over to [docker.insops.net](//docker.insops.net) and follow the instructions.\r\n\r\n#### Example Dockerfile\r\nTo build your bot as a Docker container, you must have a Dockerfile. Below are three Dockerfile examples that map to the three bots above.\r\n\r\n##### Ruby\r\n<script src=\"https://gist.github.com/zachpendleton/7848006f823ada4c0a83a7a82c4fa1d1.js\"></script>\r\n\r\n##### Java\r\n<script src=\"https://gist.github.com/zachpendleton/b3c84193e7c9347b793dae1de49b8f99.js\"></script>\r\n\r\n##### JavaScript\r\n<script src=\"https://gist.github.com/zachpendleton/0293c36bb07e00bf2b8030a8b91342fc.js\"></script>\r\n\r\nWith your Dockerfile and bot in the same directory, you can build and deploy your container by running:\r\n\r\n```bash\r\n$ docker build --rm --tag docker.insops.net/myname/bot:latest .\r\n$ docker push docker.insops.net/myname/bot:latest\r\n```\r\n\r\n**NOTE: to be considered for the final, your LDAP username _must_ be included in the Docker container name.**\r\n\r\n### Testing your bot\r\nOnce your bot is written and uploaded, you may test it against the game server by running:\r\n\r\n```bash\r\n$ echo docker.insops.net/myname/bot:latest | nc connectfour.inseng.net 3000\r\n```\r\n\r\nThe game server will download your container and play a game against a random bot. ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}